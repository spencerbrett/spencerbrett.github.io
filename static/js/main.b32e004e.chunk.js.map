{"version":3,"sources":["Square.js","tictactoe.js","ai.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Square","_ref","value","onClick","react_default","a","createElement","className","initialState","squares","Array","fill","xIsNext","reducer","state","action","type","computerPlayer","isGameOver","getScore","getAvailableMoves","makeMove","alphaBeta","_ref2","depth","alpha","beta","maximizingPlayer","Number","NEGATIVE_INFINITY","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","move","nextState","Math","max","err","return","POSITIVE_INFINITY","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","min","getMove","bestMove","bestScore","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","score","createAI","newStateAfterPlayerMove","payload","computerMove","handlePlayerMove","Error","player","position","Object","toConsumableArray","reduce","acc","square","concat","calculateWinner","lines","i","length","_lines$i","slicedToArray","b","c","winner","Board","status","_useReducer","useReducer","_useReducer2","dispatch","renderSquare","src_Square_0","App","src_Board_0","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b32e004e.chunk.js","sourcesContent":["import React from 'react';\nimport './Square.css';\n\nconst Square = ({ value, onClick }) => {\n    return (\n        <button className=\"square\" onClick={onClick}>\n            {value}\n        </button>\n    );\n};\n\nexport default Square;","import { createAI } from \"./ai\";\n\nexport function initialState() {\n    return { squares: Array(9).fill(null), xIsNext: true }\n}\n\nexport function reducer(state, action) {\n    switch (action.type) {\n        case 'move':\n            return handlePlayerMove(state, action);\n        case 'clear':\n            return initialState();\n        default:\n            throw new Error();\n    }\n}\n\nfunction handlePlayerMove(state, action) {\n    const computerPlayer = createAI({ isGameOver, getScore, makeMove, getAvailableMoves });\n    const newStateAfterPlayerMove = makeMove(state, action.payload);\n    const computerMove = computerPlayer.getMove(newStateAfterPlayerMove);\n    return computerMove ? makeMove(newStateAfterPlayerMove, computerMove) : newStateAfterPlayerMove;\n}\n\nexport function makeMove(state, move) {\n    const { player, position } = move;\n    const squares = [...state.squares];\n    squares[position] = player;\n    const xIsNext = player !== 'X';\n    return { squares, xIsNext };\n}\n\nexport function getAvailableMoves(state) {\n    const { squares, xIsNext } = state;\n    return squares.reduce((acc, square, position) => {\n        if (!square) {\n            const player = xIsNext ? 'X' : 'O';\n            return acc.concat({ player, position });\n        }\n        return acc;\n    }, []);\n}\n\nexport function calculateWinner(state) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n    ];\n    const { squares } = state;\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return squares[a];\n        }\n    }\n    return null;\n}\n\nexport function isGameOver(state) {\n    return calculateWinner(state) || getAvailableMoves(state).length === 0;\n}\n\nexport function getScore(state) {\n    const winner = calculateWinner(state);\n    let score = 0;\n    // X is the human player. We attribute a negative score to the human player.\n    if (winner === 'X') {\n        score = -(1 + getAvailableMoves(state).length);\n    } else if (winner === 'O') {\n        score = 1 + getAvailableMoves(state).length;\n    }\n    return score;\n}","export function createAI({ isGameOver, getScore, getAvailableMoves, makeMove }) {\n\n    function alphaBeta({ state, depth, alpha, beta, maximizingPlayer }) {\n        if (depth === 0 || isGameOver(state)) {\n            return getScore(state);\n        }\n        if (maximizingPlayer) {\n            let value = Number.NEGATIVE_INFINITY;\n            for (const move of getAvailableMoves(state)) {\n                const nextState = makeMove(state, move);\n                value = Math.max(value, alphaBeta({ state: nextState, depth: depth - 1, alpha, beta, maximizingPlayer: false }));\n                alpha = Math.max(alpha, value);\n                if (alpha >= beta) {\n                    break; // beta cut-off\n                }\n            }\n            return value;\n        } else {\n            let value = Number.POSITIVE_INFINITY;\n            for (const move of getAvailableMoves(state)) {\n                const nextState = makeMove(state, move);\n                value = Math.min(value, alphaBeta({ state: nextState, depth: depth - 1, alpha, beta, maximizingPlayer: true }));\n                beta = Math.min(beta, value);\n                if (alpha >= beta) {\n                    break; // alpha cut-off\n                }\n            }\n            return value;\n        }\n    }\n\n    const getMove = (state) => {\n        let bestMove = null;\n        let bestScore = Number.NEGATIVE_INFINITY;\n        for (const move of getAvailableMoves(state)) {\n            const score = alphaBeta({ state: makeMove(state, move), depth: 10, alpha: Number.NEGATIVE_INFINITY, beta: Number.POSITIVE_INFINITY, maximizingPlayer: false });\n            if (score > bestScore) {\n                bestScore = score;\n                bestMove = move;\n            }\n        }\n        return bestMove;\n    };\n\n    return { getMove };\n}","import React, { useReducer } from 'react';\nimport Square from \"./Square\";\nimport './Board.css';\nimport { calculateWinner, getAvailableMoves, initialState, reducer } from \"./tictactoe\";\n\nconst Board = () => {\n    const [state, dispatch] = useReducer(reducer, initialState());\n\n    const handleClick = position => () => {\n        const { squares, xIsNext } = state;\n        if (squares[position] || !xIsNext || calculateWinner(state)) {\n            return null;\n        }\n        dispatch({ type: 'move', payload: { player: 'X', position } });\n    };\n\n    const renderSquare = (i) => {\n        const { squares } = state;\n        return (\n            <Square value={squares[i]} onClick={handleClick(i)}/>\n        );\n    };\n\n    const winner = calculateWinner(state);\n    let status;\n    if (winner) {\n        status = 'Winner: ' + winner;\n    } else if (getAvailableMoves(state).length === 0) {\n        status = 'Draw!';\n    } else {\n        status = 'Next player: ' + (state.xIsNext ? 'X' : 'O');\n    }\n\n    return (\n        <div>\n            <div className=\"status\">{status}</div>\n            <div className=\"board-row\">\n                {renderSquare(0)}\n                {renderSquare(1)}\n                {renderSquare(2)}\n            </div>\n            <div className=\"board-row\">\n                {renderSquare(3)}\n                {renderSquare(4)}\n                {renderSquare(5)}\n            </div>\n            <div className=\"board-row\">\n                {renderSquare(6)}\n                {renderSquare(7)}\n                {renderSquare(8)}\n            </div>\n        </div>\n    );\n};\n\nexport default Board;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Board from \"./Board\";\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board/>\n                </div>\n                <div className=\"game-info\">\n                    <div>{/* status */}</div>\n                    <ol>{/* TODO */}</ol>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}